// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StationService;

#nullable disable

namespace StationService.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20251026162337_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StationService.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("StationId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("StationService.Models.StaffShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualCheckInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualCheckOutTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ShiftDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Scheduled");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_StaffShift_Status");

                    b.HasIndex("StationId", "ShiftDate")
                        .HasDatabaseName("IX_StaffShift_Station_Date");

                    b.HasIndex("UserId", "ShiftDate")
                        .HasDatabaseName("IX_StaffShift_User_Date");

                    b.HasIndex("UserId", "StationId", "ShiftDate", "StartTime")
                        .IsUnique()
                        .HasDatabaseName("UQ_StaffShift_UniqueShift");

                    b.ToTable("StaffShifts");
                });

            modelBuilder.Entity("StationService.Models.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Stations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Lat = 10.776899999999999,
                            Lng = 106.7009,
                            Location = "123 Nguyễn Huệ, Quận 1, TP.HCM",
                            Name = "Trạm Đăng Kiểm Quận 1"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Lat = 10.8505,
                            Lng = 106.7717,
                            Location = "456 Võ Văn Ngân, Thủ Đức, TP.HCM",
                            Name = "Trạm Đăng Kiểm Thủ Đức"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Lat = 10.801399999999999,
                            Lng = 106.7105,
                            Location = "789 Xô Viết Nghệ Tĩnh, Bình Thạnh, TP.HCM",
                            Name = "Trạm Đăng Kiểm Bình Thạnh"
                        });
                });

            modelBuilder.Entity("StationService.Models.Feedback", b =>
                {
                    b.HasOne("StationService.Models.Station", "Station")
                        .WithMany("Feedbacks")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("StationService.Models.StaffShift", b =>
                {
                    b.HasOne("StationService.Models.Station", "Station")
                        .WithMany("StaffShifts")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("StationService.Models.Station", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("StaffShifts");
                });
#pragma warning restore 612, 618
        }
    }
}
